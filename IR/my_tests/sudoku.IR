//everything is made of basic blocks!!

define void :main () {
    :entry

    int64[][] %arr1
    %arr1 <- new Array(7,7)
    %arr1[0][0] <- 7
    %arr1[0][1] <- 7
    %arr1[0][2] <- 7
    %arr1[1][0] <- 9
    %arr1[1][1] <- 9
    %arr1[1][2] <- 9
    %arr1[2][0] <- 11 
    %arr1[2][1] <- 11 
    %arr1[2][2] <- 11
    //call :print2DArray(%arr1)
    int64[][] %puzzle
    %puzzle <- call :generate9x9Puzzle()
    return
}

define int64 :encode(int64 %n) {
    :entry

    %n <- %n << 1
    %n <- %n + 1
    return %n
}

// creates a Sudoku board; -1 implies that the square is empty
define int64[][] :generate9x9Puzzle() {
    :entry    

    int64[][] %board
    int64 %numRows
    int64 %numCols
    %numRows <- call :encode(9)
    %numCols <- call :encode(9)
    %board <- new Array(%numRows, %numCols)

    int64 %num
    int64 %blank
    %blank <- call :encode(-1)
    //zeroth row
    %num <- call :encode(5)
    %board[0][0] <- %num
    %num <- call :encode(3)
    %board[0][1] <- %num
    %board[0][2] <- %blank
    %board[0][3] <- %blank
    %num <- call :encode(7)
    %board[0][4] <- %num
    %board[0][5] <- %blank
    %board[0][6] <- %blank
    %board[0][7] <- %blank
    %board[0][8] <- %blank

    //first row
    %num <- call :encode(6)
    %board[1][0] <- %num
    %board[1][1] <- %blank
    %board[1][2] <- %blank
    %num <- call :encode(1)
    %board[1][3] <- %num
    %num <- call :encode(9)
    %board[1][4] <- %num
    %num <- call :encode(5)
    %board[1][5] <- %num
    %board[1][6] <- %blank
    %board[1][7] <- %blank
    %board[1][8] <- %blank

    //second row
    %board[2][0] <- %blank
    %num <- call :encode(9)
    %board[2][1] <- %num
    %num <- call :encode(8)
    %board[2][2] <- %num
    %board[2][3] <- %blank
    %board[2][4] <- %blank
    %board[2][5] <- %blank
    %board[2][6] <- %blank
    %num <- call :encode(6)
    %board[2][7] <- %num
    %board[2][8] <- %blank
    
    //third row
    %num <- call :encode(8)
    %board[3][0] <- %num
    %board[3][1] <- %blank
    %board[3][2] <- %blank
    %board[3][3] <- %blank
    %num <- call :encode(6)
    %board[3][4] <- %num
    %board[3][5] <- %blank
    %board[3][6] <- %blank
    %board[3][7] <- %blank
    %num <- call :encode(3)
    %board[3][8] <- %num

    //fourth row
    %num <- call :encode(4)
    %board[4][0] <- %num
    %board[4][1] <- %blank
    %board[4][2] <- %blank
    %num <- call :encode(8)
    %board[4][3] <- %num
    %board[4][4] <- %blank
    %num <- call :encode(3)
    %board[4][5] <- %num
    %board[4][6] <- %blank
    %board[4][7] <- %blank
    %num <- call :encode(1)
    %board[4][8] <- %num

    //fifth row
    %num <- call :encode(7)
    %board[5][0] <- %num
    %board[5][1] <- %blank
    %board[5][2] <- %blank
    %board[5][3] <- %blank
    %num <- call :encode(2)
    %board[5][4] <- %num
    %board[5][5] <- %blank
    %board[5][6] <- %blank
    %board[5][7] <- %blank
    %num <- call :encode(6)
    %board[5][8] <- %num
    
    //sixth row
    %board[6][0] <- %blank
    %num <- call :encode(6)
    %board[6][1] <- %num
    %board[6][2] <- %blank
    %board[6][3] <- %blank
    %board[6][4] <- %blank
    %board[6][5] <- %blank
    %num <- call :encode(2)
    %board[6][6] <- %num
    %num <- call :encode(8)
    %board[6][7] <- %num
    %board[6][8] <- %blank
    
    //seventh row
    %board[7][0] <- %blank
    %board[7][1] <- %blank
    %board[7][2] <- %blank
    %num <- call :encode(4)
    %board[7][3] <- %num
    %num <- call :encode(1)
    %board[7][4] <- %num
    %num <- call :encode(9)
    %board[7][5] <- %num
    %board[7][6] <- %blank
    %board[7][7] <- %blank
    %num <- call :encode(5)
    %board[7][8] <- %num
    
    //eighth row
    %board[8][0] <- %blank
    %board[8][1] <- %blank
    %board[8][2] <- %blank
    %board[8][3] <- %blank
    %num <- call :encode(8)
    %board[8][4] <- %num
    %board[8][5] <- %blank
    %board[8][6] <- %blank
    %num <- call :encode(7)
    %board[8][7] <- %num
    %num <- call :encode(9)
    %board[8][8] <- %num

    call :print2DArray(%board)

    return %board
}
    
define int64 :isSafe(int64[][] %board, int64 %x, int64 %y, int64 %numToTry) {
    :entry
    
    //check row
    int64 %r
    %r<-%x
    br :check_row_lab

    :check_row_lab
    int64 %check_row
    %check_row <- 

    //check col
    //check box
}
    
    

define void :print2DArray(int64[][] %arr) {
    :entry
    int64 %first_dimension_length
    int64 %second_dimension_length

    %first_dimension_length <- length %arr 0 // decoded (prints actual)
    %second_dimension_length <- length %arr 1 // decoded
    
    %first_dimension_length <- %first_dimension_length >> 1 // encode
    %second_dimension_length <- %second_dimension_length >> 1 // decode

    int64 %i
    %i <- 0
    br :check_loop_1_lab
    
    :check_loop_1_lab
    int64 %check_loop_1
    %check_loop_1 <- %i < %first_dimension_length
    br %check_loop_1 :loop_1_body :exit_loops

    :loop_1_body
    int64 %j
    %j <- 0
    int64[] %currRow
    int64 %new_num_col //new num row is 3 (encoded)
    // encode num col
    %new_num_col <- call :encode(%second_dimension_length)
    %currRow <- new Array(%new_num_col)
    br :check_loop_2_lab

    :check_loop_2_lab
    int64 %check_loop_2
    %check_loop_2 <- %j < %second_dimension_length
    br %check_loop_2 :loop_2_body :exit_loop_2

    :loop_2_body
    int64 %currElem
    
    %currElem <- %arr[%i][%j]
    int64 %temp_currElem
    %currRow[%j] <- %currElem
    %j <- %j + 1
    br :check_loop_2_lab

    :exit_loop_2
    %i <- %i + 1
    call print(%currRow)
    br :check_loop_1_lab

    :exit_loops
    return
}
